plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'io.github.hieudoanm'
version = '0.0.1-SNAPSHOT'
description = 'micro-core-banking'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // --- Lombok ---
    annotationProcessor 'org.projectlombok:lombok:1.18.42'
    compileOnly 'org.projectlombok:lombok:1.18.42'
    implementation 'org.projectlombok:lombok:1.18.42'

    // --- Jackson (JSON handling) ---
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'

    // --- Database ---
    implementation 'org.flywaydb:flyway-core:10.17.0'
    implementation 'org.postgresql:postgresql:42.7.4'

    // --- Spring Boot ---
    implementation 'org.springframework.boot:spring-boot-starter:3.3.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.3.4'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.3.4'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.3.4'

    // --- Kafka ---
    implementation 'org.springframework.kafka:spring-kafka:3.2.4'

    // --- Test dependencies ---
    testImplementation 'com.h2database:h2:2.3.232'
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.4'
    testImplementation 'org.springframework.kafka:spring-kafka-test:3.2.4'

    // JUnit Platform (needed for running tests)
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.3'
}


tasks.named('test') {
    useJUnitPlatform()
}

/**
 * -------------------------
 * Checkstyle Configuration
 * -------------------------
 */
checkstyle {
    toolVersion = '11.0.1' // Latest stable version
    config = resources.text.fromFile('config/checkstyle/checkstyle.xml')
    ignoreFailures = false  // Fail build if violations are found
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
        html.outputLocation = file("$buildDir/reports/checkstyle/checkstyle.html")
    }
}

/**
 * -------------------------
 * PMD Configuration
 * -------------------------
 */
pmd {
    toolVersion = '7.17.0' // Latest PMD version
    ruleSets = [] // We'll use a custom ruleset instead of defaults
    ruleSetFiles = files('config/pmd/pmd-ruleset.xml')
    ignoreFailures = false  // Fail build if PMD violations are found
}

tasks.withType(Pmd).configureEach {
    reports {
        xml.required = false
        html.required = true
        html.outputLocation = file("$buildDir/reports/pmd/pmd.html")
    }
}
