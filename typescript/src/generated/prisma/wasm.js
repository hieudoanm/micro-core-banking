
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  message: 'message',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountNumber: 'accountNumber',
  customerId: 'customerId',
  accountType: 'accountType',
  balance: 'balance',
  currency: 'currency',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  transactionRef: 'transactionRef',
  transactionType: 'transactionType',
  amount: 'amount',
  currency: 'currency',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  accountId: 'accountId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AccountType = exports.$Enums.AccountType = {
  SAVINGS: 'SAVINGS',
  CHECKING: 'CHECKING'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  CLOSED: 'CLOSED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL',
  TRANSFER: 'TRANSFER'
};

exports.Prisma.ModelName = {
  AuditLog: 'AuditLog',
  Account: 'Account',
  Transaction: 'Transaction'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/hieudoan/git/github.com/hieudoanm/apps/micro-core-banking/typescript/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/hieudoan/git/github.com/hieudoanm/apps/micro-core-banking/typescript/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../../.env",
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  schemas  = \"micro_core_banking\"\n}\n\nmodel AuditLog {\n  id         BigInt   @id @default(autoincrement()) @map(\"id\")\n  action     String   @default(\"\") @map(\"action\") @db.VarChar(50)\n  entityType String   @default(\"\") @map(\"entity_type\") @db.VarChar(50)\n  entityId   BigInt   @default(0) @map(\"entity_id\")\n  message    String?  @default(\"\") @map(\"message\") @db.Text\n  createdBy  String?  @default(\"\") @map(\"created_by\") @db.VarChar(50)\n  createdAt  DateTime @default(now()) @map(\"created_at\") @db.Timestamptz()\n  updatedAt  DateTime @default(now()) @updatedAt @map(\"updated_at\")\n\n  @@map(\"audit_logs\")\n  @@schema(\"micro_core_banking\")\n}\n\nmodel Account {\n  id            BigInt        @id @default(autoincrement()) @map(\"id\")\n  accountNumber String        @unique @default(\"\") @map(\"account_number\") @db.VarChar(20)\n  customerId    String        @default(\"\") @map(\"customer_id\") @db.VarChar(36)\n  accountType   AccountType   @map(\"account_type\")\n  balance       Decimal       @default(0) @map(\"balance\") @db.Decimal(15, 2)\n  currency      String        @map(\"currency\") @db.VarChar(3)\n  status        AccountStatus @default(ACTIVE) @map(\"status\")\n  createdAt     DateTime      @default(now()) @map(\"created_at\")\n  updatedAt     DateTime      @default(now()) @updatedAt @map(\"updated_at\")\n\n  // Relationships\n  transactions Transaction[]\n\n  @@map(\"accounts\")\n  @@schema(\"micro_core_banking\")\n}\n\nenum AccountType {\n  SAVINGS\n  CHECKING\n  // add other types here\n\n  @@schema(\"micro_core_banking\")\n}\n\nenum AccountStatus {\n  ACTIVE\n  INACTIVE\n  CLOSED\n  // add other statuses here\n\n  @@schema(\"micro_core_banking\")\n}\n\nenum TransactionType {\n  DEPOSIT\n  WITHDRAWAL\n  TRANSFER\n  // add other types here\n\n  @@schema(\"micro_core_banking\")\n}\n\nmodel Transaction {\n  id              BigInt          @id @default(autoincrement()) @map(\"id\")\n  transactionRef  String          @unique @default(\"\") @map(\"transaction_ref\") @db.VarChar(36)\n  transactionType TransactionType @map(\"transaction_type\")\n  amount          Decimal         @default(0) @map(\"amount\") @db.Decimal(15, 2)\n  currency        String          @default(\"\") @map(\"currency\") @db.VarChar(3)\n  description     String?         @default(\"\") @map(\"description\") @db.VarChar(255)\n  createdAt       DateTime        @default(now()) @map(\"created_at\")\n  updatedAt       DateTime        @default(now()) @updatedAt @map(\"updated_at\")\n\n  // Relations\n  account   Account @relation(fields: [accountId], references: [id])\n  accountId BigInt\n\n  @@map(\"transactions\")\n  @@schema(\"micro_core_banking\")\n}\n",
  "inlineSchemaHash": "ffad47de9b3aa2a4c77abf3e0551ccecbfd3d7a3cea1c29460a5135b25257a3f",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"AuditLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\",\"dbName\":\"id\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"action\"},{\"name\":\"entityType\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"entity_type\"},{\"name\":\"entityId\",\"kind\":\"scalar\",\"type\":\"BigInt\",\"dbName\":\"entity_id\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"message\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"created_by\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"}],\"dbName\":\"audit_logs\"},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\",\"dbName\":\"id\"},{\"name\":\"accountNumber\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"account_number\"},{\"name\":\"customerId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"customer_id\"},{\"name\":\"accountType\",\"kind\":\"enum\",\"type\":\"AccountType\",\"dbName\":\"account_type\"},{\"name\":\"balance\",\"kind\":\"scalar\",\"type\":\"Decimal\",\"dbName\":\"balance\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"currency\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AccountStatus\",\"dbName\":\"status\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"AccountToTransaction\"}],\"dbName\":\"accounts\"},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\",\"dbName\":\"id\"},{\"name\":\"transactionRef\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"transaction_ref\"},{\"name\":\"transactionType\",\"kind\":\"enum\",\"type\":\"TransactionType\",\"dbName\":\"transaction_type\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\",\"dbName\":\"amount\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"currency\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"description\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"account\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToTransaction\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"BigInt\"}],\"dbName\":\"transactions\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

