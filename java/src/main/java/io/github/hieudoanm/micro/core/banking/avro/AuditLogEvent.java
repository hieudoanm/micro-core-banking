/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package io.github.hieudoanm.micro.core.banking.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class AuditLogEvent extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -50179137352794252L;

  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"AuditLogEvent\",\"namespace\":\"io.github.hieudoanm.micro.core.banking.avro\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"action\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"entityId\",\"type\":\"long\"},{\"name\":\"entityType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createdBy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static final SpecificData MODEL$ = new SpecificData();

  static {
    MODEL$.addLogicalTypeConversion(
        new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<AuditLogEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AuditLogEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AuditLogEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AuditLogEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
   * SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AuditLogEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AuditLogEvent to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AuditLogEvent from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AuditLogEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of
   *     this class
   */
  public static AuditLogEvent fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String eventId;
  private java.lang.String action;
  private long entityId;
  private java.lang.String entityType;
  private java.lang.String message;
  private java.lang.String createdBy;
  private java.time.Instant createdAt;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public AuditLogEvent() {}

  /**
   * All-args constructor.
   *
   * @param eventId The new value for eventId
   * @param action The new value for action
   * @param entityId The new value for entityId
   * @param entityType The new value for entityType
   * @param message The new value for message
   * @param createdBy The new value for createdBy
   * @param createdAt The new value for createdAt
   */
  public AuditLogEvent(
      java.lang.String eventId,
      java.lang.String action,
      java.lang.Long entityId,
      java.lang.String entityType,
      java.lang.String message,
      java.lang.String createdBy,
      java.time.Instant createdAt) {
    this.eventId = eventId;
    this.action = action;
    this.entityId = entityId;
    this.entityType = entityType;
    this.message = message;
    this.createdBy = createdBy;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  @Override
  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return eventId;
      case 1:
        return action;
      case 2:
        return entityId;
      case 3:
        return entityType;
      case 4:
        return message;
      case 5:
        return createdBy;
      case 6:
        return createdAt;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
        null,
        null,
        null,
        null,
        null,
        null,
        new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
        null
      };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        eventId = value$ != null ? value$.toString() : null;
        break;
      case 1:
        action = value$ != null ? value$.toString() : null;
        break;
      case 2:
        entityId = (java.lang.Long) value$;
        break;
      case 3:
        entityType = value$ != null ? value$.toString() : null;
        break;
      case 4:
        message = value$ != null ? value$.toString() : null;
        break;
      case 5:
        createdBy = value$ != null ? value$.toString() : null;
        break;
      case 6:
        createdAt = (java.time.Instant) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   *
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }

  /**
   * Sets the value of the 'eventId' field.
   *
   * @param value the value to set.
   */
  public void setEventId(java.lang.String value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'action' field.
   *
   * @return The value of the 'action' field.
   */
  public java.lang.String getAction() {
    return action;
  }

  /**
   * Sets the value of the 'action' field.
   *
   * @param value the value to set.
   */
  public void setAction(java.lang.String value) {
    this.action = value;
  }

  /**
   * Gets the value of the 'entityId' field.
   *
   * @return The value of the 'entityId' field.
   */
  public long getEntityId() {
    return entityId;
  }

  /**
   * Sets the value of the 'entityId' field.
   *
   * @param value the value to set.
   */
  public void setEntityId(long value) {
    this.entityId = value;
  }

  /**
   * Gets the value of the 'entityType' field.
   *
   * @return The value of the 'entityType' field.
   */
  public java.lang.String getEntityType() {
    return entityType;
  }

  /**
   * Sets the value of the 'entityType' field.
   *
   * @param value the value to set.
   */
  public void setEntityType(java.lang.String value) {
    this.entityType = value;
  }

  /**
   * Gets the value of the 'message' field.
   *
   * @return The value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   *
   * @param value the value to set.
   */
  public void setMessage(java.lang.String value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'createdBy' field.
   *
   * @return The value of the 'createdBy' field.
   */
  public java.lang.String getCreatedBy() {
    return createdBy;
  }

  /**
   * Sets the value of the 'createdBy' field.
   *
   * @param value the value to set.
   */
  public void setCreatedBy(java.lang.String value) {
    this.createdBy = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   *
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }

  /**
   * Sets the value of the 'createdAt' field.
   *
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new AuditLogEvent RecordBuilder.
   *
   * @return A new AuditLogEvent RecordBuilder
   */
  public static io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder newBuilder() {
    return new io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder();
  }

  /**
   * Creates a new AuditLogEvent RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new AuditLogEvent RecordBuilder
   */
  public static io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder newBuilder(
      io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder other) {
    if (other == null) {
      return new io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder();
    } else {
      return new io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder(other);
    }
  }

  /**
   * Creates a new AuditLogEvent RecordBuilder by copying an existing AuditLogEvent instance.
   *
   * @param other The existing instance to copy.
   * @return A new AuditLogEvent RecordBuilder
   */
  public static io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder newBuilder(
      io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent other) {
    if (other == null) {
      return new io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder();
    } else {
      return new io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder(other);
    }
  }

  /** RecordBuilder for AuditLogEvent instances. */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder
      extends org.apache.avro.specific.SpecificRecordBuilderBase<AuditLogEvent>
      implements org.apache.avro.data.RecordBuilder<AuditLogEvent> {

    private java.lang.String eventId;
    private java.lang.String action;
    private long entityId;
    private java.lang.String entityType;
    private java.lang.String message;
    private java.lang.String createdBy;
    private java.time.Instant createdAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.action)) {
        this.action = data().deepCopy(fields()[1].schema(), other.action);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.entityId)) {
        this.entityId = data().deepCopy(fields()[2].schema(), other.entityId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.entityType)) {
        this.entityType = data().deepCopy(fields()[3].schema(), other.entityType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.message)) {
        this.message = data().deepCopy(fields()[4].schema(), other.message);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.createdBy)) {
        this.createdBy = data().deepCopy(fields()[5].schema(), other.createdBy);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[6].schema(), other.createdAt);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing AuditLogEvent instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.action)) {
        this.action = data().deepCopy(fields()[1].schema(), other.action);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.entityId)) {
        this.entityId = data().deepCopy(fields()[2].schema(), other.entityId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.entityType)) {
        this.entityType = data().deepCopy(fields()[3].schema(), other.entityType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.message)) {
        this.message = data().deepCopy(fields()[4].schema(), other.message);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.createdBy)) {
        this.createdBy = data().deepCopy(fields()[5].schema(), other.createdBy);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[6].schema(), other.createdAt);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Gets the value of the 'eventId' field.
     *
     * @return The value.
     */
    public java.lang.String getEventId() {
      return eventId;
    }

    /**
     * Sets the value of the 'eventId' field.
     *
     * @param value The value of 'eventId'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder setEventId(
        java.lang.String value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'eventId' field has been set.
     *
     * @return True if the 'eventId' field has been set, false otherwise.
     */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'eventId' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'action' field.
     *
     * @return The value.
     */
    public java.lang.String getAction() {
      return action;
    }

    /**
     * Sets the value of the 'action' field.
     *
     * @param value The value of 'action'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder setAction(
        java.lang.String value) {
      validate(fields()[1], value);
      this.action = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'action' field has been set.
     *
     * @return True if the 'action' field has been set, false otherwise.
     */
    public boolean hasAction() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'action' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder clearAction() {
      action = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'entityId' field.
     *
     * @return The value.
     */
    public long getEntityId() {
      return entityId;
    }

    /**
     * Sets the value of the 'entityId' field.
     *
     * @param value The value of 'entityId'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder setEntityId(
        long value) {
      validate(fields()[2], value);
      this.entityId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'entityId' field has been set.
     *
     * @return True if the 'entityId' field has been set, false otherwise.
     */
    public boolean hasEntityId() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'entityId' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder clearEntityId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'entityType' field.
     *
     * @return The value.
     */
    public java.lang.String getEntityType() {
      return entityType;
    }

    /**
     * Sets the value of the 'entityType' field.
     *
     * @param value The value of 'entityType'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder setEntityType(
        java.lang.String value) {
      validate(fields()[3], value);
      this.entityType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'entityType' field has been set.
     *
     * @return True if the 'entityType' field has been set, false otherwise.
     */
    public boolean hasEntityType() {
      return fieldSetFlags()[3];
    }

    /**
     * Clears the value of the 'entityType' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder clearEntityType() {
      entityType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'message' field.
     *
     * @return The value.
     */
    public java.lang.String getMessage() {
      return message;
    }

    /**
     * Sets the value of the 'message' field.
     *
     * @param value The value of 'message'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder setMessage(
        java.lang.String value) {
      validate(fields()[4], value);
      this.message = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'message' field has been set.
     *
     * @return True if the 'message' field has been set, false otherwise.
     */
    public boolean hasMessage() {
      return fieldSetFlags()[4];
    }

    /**
     * Clears the value of the 'message' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder clearMessage() {
      message = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'createdBy' field.
     *
     * @return The value.
     */
    public java.lang.String getCreatedBy() {
      return createdBy;
    }

    /**
     * Sets the value of the 'createdBy' field.
     *
     * @param value The value of 'createdBy'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder setCreatedBy(
        java.lang.String value) {
      validate(fields()[5], value);
      this.createdBy = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'createdBy' field has been set.
     *
     * @return True if the 'createdBy' field has been set, false otherwise.
     */
    public boolean hasCreatedBy() {
      return fieldSetFlags()[5];
    }

    /**
     * Clears the value of the 'createdBy' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder clearCreatedBy() {
      createdBy = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'createdAt' field.
     *
     * @return The value.
     */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }

    /**
     * Sets the value of the 'createdAt' field.
     *
     * @param value The value of 'createdAt'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder setCreatedAt(
        java.time.Instant value) {
      validate(fields()[6], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'createdAt' field has been set.
     *
     * @return True if the 'createdAt' field has been set, false otherwise.
     */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[6];
    }

    /**
     * Clears the value of the 'createdAt' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.AuditLogEvent.Builder clearCreatedAt() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AuditLogEvent build() {
      try {
        AuditLogEvent record = new AuditLogEvent();
        record.eventId =
            fieldSetFlags()[0] ? this.eventId : (java.lang.String) defaultValue(fields()[0]);
        record.action =
            fieldSetFlags()[1] ? this.action : (java.lang.String) defaultValue(fields()[1]);
        record.entityId =
            fieldSetFlags()[2] ? this.entityId : (java.lang.Long) defaultValue(fields()[2]);
        record.entityType =
            fieldSetFlags()[3] ? this.entityType : (java.lang.String) defaultValue(fields()[3]);
        record.message =
            fieldSetFlags()[4] ? this.message : (java.lang.String) defaultValue(fields()[4]);
        record.createdBy =
            fieldSetFlags()[5] ? this.createdBy : (java.lang.String) defaultValue(fields()[5]);
        record.createdAt =
            fieldSetFlags()[6] ? this.createdAt : (java.time.Instant) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AuditLogEvent> WRITER$ =
      (org.apache.avro.io.DatumWriter<AuditLogEvent>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AuditLogEvent> READER$ =
      (org.apache.avro.io.DatumReader<AuditLogEvent>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }
}
