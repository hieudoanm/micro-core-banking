/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package io.github.hieudoanm.micro.core.banking.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class TransactionEvent extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4794793146331888618L;

  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"TransactionEvent\",\"namespace\":\"io.github.hieudoanm.micro.core.banking.avro\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"transactionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionType\",\"symbols\":[\"DEPOSIT\",\"WITHDRAWAL\",\"TRANSFER\"]}},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":19,\"scale\":2}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static final SpecificData MODEL$ = new SpecificData();

  static {
    MODEL$.addLogicalTypeConversion(
        new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<TransactionEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
   * SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionEvent to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionEvent from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of
   *     this class
   */
  public static TransactionEvent fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String eventId;
  private java.lang.String transactionId;
  private java.lang.String accountNumber;
  private io.github.hieudoanm.micro.core.banking.avro.TransactionType type;
  private java.math.BigDecimal amount;
  private java.lang.String currency;
  private java.time.Instant timestamp;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public TransactionEvent() {}

  /**
   * All-args constructor.
   *
   * @param eventId The new value for eventId
   * @param transactionId The new value for transactionId
   * @param accountNumber The new value for accountNumber
   * @param type The new value for type
   * @param amount The new value for amount
   * @param currency The new value for currency
   * @param timestamp The new value for timestamp
   */
  public TransactionEvent(
      java.lang.String eventId,
      java.lang.String transactionId,
      java.lang.String accountNumber,
      io.github.hieudoanm.micro.core.banking.avro.TransactionType type,
      java.math.BigDecimal amount,
      java.lang.String currency,
      java.time.Instant timestamp) {
    this.eventId = eventId;
    this.transactionId = transactionId;
    this.accountNumber = accountNumber;
    this.type = type;
    this.amount = amount;
    this.currency = currency;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  @Override
  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return eventId;
      case 1:
        return transactionId;
      case 2:
        return accountNumber;
      case 3:
        return type;
      case 4:
        return amount;
      case 5:
        return currency;
      case 6:
        return timestamp;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
        null,
        null,
        null,
        null,
        new org.apache.avro.Conversions.DecimalConversion(),
        null,
        new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
        null
      };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        eventId = value$ != null ? value$.toString() : null;
        break;
      case 1:
        transactionId = value$ != null ? value$.toString() : null;
        break;
      case 2:
        accountNumber = value$ != null ? value$.toString() : null;
        break;
      case 3:
        type = (io.github.hieudoanm.micro.core.banking.avro.TransactionType) value$;
        break;
      case 4:
        amount = (java.math.BigDecimal) value$;
        break;
      case 5:
        currency = value$ != null ? value$.toString() : null;
        break;
      case 6:
        timestamp = (java.time.Instant) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   *
   * @return The value of the 'eventId' field.
   */
  public java.lang.String getEventId() {
    return eventId;
  }

  /**
   * Sets the value of the 'eventId' field.
   *
   * @param value the value to set.
   */
  public void setEventId(java.lang.String value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'transactionId' field.
   *
   * @return The value of the 'transactionId' field.
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }

  /**
   * Sets the value of the 'transactionId' field.
   *
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.String value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'accountNumber' field.
   *
   * @return The value of the 'accountNumber' field.
   */
  public java.lang.String getAccountNumber() {
    return accountNumber;
  }

  /**
   * Sets the value of the 'accountNumber' field.
   *
   * @param value the value to set.
   */
  public void setAccountNumber(java.lang.String value) {
    this.accountNumber = value;
  }

  /**
   * Gets the value of the 'type' field.
   *
   * @return The value of the 'type' field.
   */
  public io.github.hieudoanm.micro.core.banking.avro.TransactionType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   *
   * @param value the value to set.
   */
  public void setType(io.github.hieudoanm.micro.core.banking.avro.TransactionType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'amount' field.
   *
   * @return The value of the 'amount' field.
   */
  public java.math.BigDecimal getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   *
   * @param value the value to set.
   */
  public void setAmount(java.math.BigDecimal value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   *
   * @return The value of the 'currency' field.
   */
  public java.lang.String getCurrency() {
    return currency;
  }

  /**
   * Sets the value of the 'currency' field.
   *
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   *
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   *
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new TransactionEvent RecordBuilder.
   *
   * @return A new TransactionEvent RecordBuilder
   */
  public static io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder newBuilder() {
    return new io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder();
  }

  /**
   * Creates a new TransactionEvent RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new TransactionEvent RecordBuilder
   */
  public static io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder newBuilder(
      io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder other) {
    if (other == null) {
      return new io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder();
    } else {
      return new io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder(other);
    }
  }

  /**
   * Creates a new TransactionEvent RecordBuilder by copying an existing TransactionEvent instance.
   *
   * @param other The existing instance to copy.
   * @return A new TransactionEvent RecordBuilder
   */
  public static io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder newBuilder(
      io.github.hieudoanm.micro.core.banking.avro.TransactionEvent other) {
    if (other == null) {
      return new io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder();
    } else {
      return new io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder(other);
    }
  }

  /** RecordBuilder for TransactionEvent instances. */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder
      extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionEvent>
      implements org.apache.avro.data.RecordBuilder<TransactionEvent> {

    private java.lang.String eventId;
    private java.lang.String transactionId;
    private java.lang.String accountNumber;
    private io.github.hieudoanm.micro.core.banking.avro.TransactionType type;
    private java.math.BigDecimal amount;
    private java.lang.String currency;
    private java.time.Instant timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[1].schema(), other.transactionId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[2].schema(), other.accountNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionEvent instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(io.github.hieudoanm.micro.core.banking.avro.TransactionEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[1].schema(), other.transactionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[2].schema(), other.accountNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Gets the value of the 'eventId' field.
     *
     * @return The value.
     */
    public java.lang.String getEventId() {
      return eventId;
    }

    /**
     * Sets the value of the 'eventId' field.
     *
     * @param value The value of 'eventId'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder setEventId(
        java.lang.String value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'eventId' field has been set.
     *
     * @return True if the 'eventId' field has been set, false otherwise.
     */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'eventId' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'transactionId' field.
     *
     * @return The value.
     */
    public java.lang.String getTransactionId() {
      return transactionId;
    }

    /**
     * Sets the value of the 'transactionId' field.
     *
     * @param value The value of 'transactionId'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder setTransactionId(
        java.lang.String value) {
      validate(fields()[1], value);
      this.transactionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'transactionId' field has been set.
     *
     * @return True if the 'transactionId' field has been set, false otherwise.
     */
    public boolean hasTransactionId() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'transactionId' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder
        clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'accountNumber' field.
     *
     * @return The value.
     */
    public java.lang.String getAccountNumber() {
      return accountNumber;
    }

    /**
     * Sets the value of the 'accountNumber' field.
     *
     * @param value The value of 'accountNumber'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder setAccountNumber(
        java.lang.String value) {
      validate(fields()[2], value);
      this.accountNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'accountNumber' field has been set.
     *
     * @return True if the 'accountNumber' field has been set, false otherwise.
     */
    public boolean hasAccountNumber() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'accountNumber' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder
        clearAccountNumber() {
      accountNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'type' field.
     *
     * @return The value.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionType getType() {
      return type;
    }

    /**
     * Sets the value of the 'type' field.
     *
     * @param value The value of 'type'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder setType(
        io.github.hieudoanm.micro.core.banking.avro.TransactionType value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'type' field has been set.
     *
     * @return True if the 'type' field has been set, false otherwise.
     */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }

    /**
     * Clears the value of the 'type' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'amount' field.
     *
     * @return The value.
     */
    public java.math.BigDecimal getAmount() {
      return amount;
    }

    /**
     * Sets the value of the 'amount' field.
     *
     * @param value The value of 'amount'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder setAmount(
        java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'amount' field has been set.
     *
     * @return True if the 'amount' field has been set, false otherwise.
     */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }

    /**
     * Clears the value of the 'amount' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'currency' field.
     *
     * @return The value.
     */
    public java.lang.String getCurrency() {
      return currency;
    }

    /**
     * Sets the value of the 'currency' field.
     *
     * @param value The value of 'currency'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder setCurrency(
        java.lang.String value) {
      validate(fields()[5], value);
      this.currency = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'currency' field has been set.
     *
     * @return True if the 'currency' field has been set, false otherwise.
     */
    public boolean hasCurrency() {
      return fieldSetFlags()[5];
    }

    /**
     * Clears the value of the 'currency' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'timestamp' field.
     *
     * @return The value.
     */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     *
     * @param value The value of 'timestamp'.
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder setTimestamp(
        java.time.Instant value) {
      validate(fields()[6], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'timestamp' field has been set.
     *
     * @return True if the 'timestamp' field has been set, false otherwise.
     */
    public boolean hasTimestamp() {
      return fieldSetFlags()[6];
    }

    /**
     * Clears the value of the 'timestamp' field.
     *
     * @return This builder.
     */
    public io.github.hieudoanm.micro.core.banking.avro.TransactionEvent.Builder clearTimestamp() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionEvent build() {
      try {
        TransactionEvent record = new TransactionEvent();
        record.eventId =
            fieldSetFlags()[0] ? this.eventId : (java.lang.String) defaultValue(fields()[0]);
        record.transactionId =
            fieldSetFlags()[1] ? this.transactionId : (java.lang.String) defaultValue(fields()[1]);
        record.accountNumber =
            fieldSetFlags()[2] ? this.accountNumber : (java.lang.String) defaultValue(fields()[2]);
        record.type =
            fieldSetFlags()[3]
                ? this.type
                : (io.github.hieudoanm.micro.core.banking.avro.TransactionType)
                    defaultValue(fields()[3]);
        record.amount =
            fieldSetFlags()[4] ? this.amount : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.currency =
            fieldSetFlags()[5] ? this.currency : (java.lang.String) defaultValue(fields()[5]);
        record.timestamp =
            fieldSetFlags()[6] ? this.timestamp : (java.time.Instant) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionEvent> WRITER$ =
      (org.apache.avro.io.DatumWriter<TransactionEvent>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionEvent> READER$ =
      (org.apache.avro.io.DatumReader<TransactionEvent>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }
}
